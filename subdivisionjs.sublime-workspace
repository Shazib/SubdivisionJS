{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"projec",
				"projectionMatrix (?)"
			],
			[
				"trans",
				"translate"
			],
			[
				"cli",
				"clientY (?)"
			],
			[
				"last",
				"lastMouseX (?)"
			],
			[
				"mo",
				"modelRotationMatrix (?)"
			],
			[
				"delta",
				"deltaY (num)"
			],
			[
				"lastMou",
				"lastMouseY (?)"
			],
			[
				"push",
				"pushIfNotExists (fn/1)"
			],
			[
				"ed",
				"oldEdgeIndexes (?)"
			],
			[
				"new",
				"newEdges ([])"
			],
			[
				"in",
				"indicesForFace (obj)"
			],
			[
				"ver",
				"vertexIndicesForFace (?)"
			],
			[
				"verte",
				"vertexIndicesForFaces ([])"
			],
			[
				"modelC",
				"modelColor ([])"
			],
			[
				"face",
				"faces ([])"
			],
			[
				"fa",
				"faces ([])"
			],
			[
				"vertexin",
				"vertexIndicesForFaces ([])"
			],
			[
				"vertex",
				"vertexIndicesForFace"
			],
			[
				"old",
				"oldEdgeIndexes"
			],
			[
				"vertexindi",
				"vertexIndicesForFace"
			],
			[
				"ve",
				"vertexIndicesForFace (?)"
			],
			[
				"vert",
				"vertexIndex (?)"
			],
			[
				"model",
				"modelColors ([])"
			],
			[
				"vertexIn",
				"vertexIndicesForFace"
			],
			[
				"mid",
				"midOne (?)"
			],
			[
				"vertexinde",
				"vertexIndexTwo (?)"
			],
			[
				"edgein",
				"edgeIndexTwo (?)"
			],
			[
				"num",
				"numEdgesInFace (?)"
			],
			[
				"edgeIn",
				"edgeIndices"
			],
			[
				"s",
				"doosabinSubdivide (fn/0)"
			],
			[
				"get",
				"getCenter (?)"
			],
			[
				"nu",
				"numFaces (num)"
			],
			[
				"edgeT",
				"edgeTwoIndex (?)"
			],
			[
				"getE",
				"getEdgePoint"
			],
			[
				"average",
				"averageOfFacePointsAdjacent"
			],
			[
				"edges",
				"edgesFromFaceToEdgePoints ([])"
			],
			[
				"edgepo",
				"edgePoints ([])"
			],
			[
				"viewport",
				"MAX_VIEWPORT_DIMS (num)"
			],
			[
				"Mat",
				"Matrix (fn/0)"
			],
			[
				"r",
				"Rotation (fn/2)"
			],
			[
				"del",
				"deltaY (num)"
			],
			[
				"Ro",
				"RotationX"
			],
			[
				"delt",
				"deltaY"
			],
			[
				"rot",
				"RotationY (fn/1)"
			],
			[
				"Rotati",
				"RotationX (fn/1)"
			],
			[
				"matri",
				"multMatrix (fn/1)"
			],
			[
				"on",
				"onclick"
			],
			[
				"wire",
				"wireframeVectors ([])"
			],
			[
				"modelCol",
				"modelColors ([])"
			],
			[
				"cubev",
				"cubeVecIndexBuffer (?)"
			],
			[
				"cube",
				"cubeVecBuffer (?)"
			],
			[
				"modelc",
				"modelColor ([])"
			],
			[
				"TRI",
				"TRIANGLE_FAN (num)"
			],
			[
				"mesh",
				"meshCube"
			],
			[
				"cun",
				"cubeVertexIndices ([])"
			],
			[
				"meshC",
				"meshCubeC (obj)"
			],
			[
				"ena",
				"enableVertexAttribArray (?)"
			],
			[
				"vertexNew",
				"vertexNewPos"
			],
			[
				"vertin",
				"vertexIndiciesForFaceNew (?)"
			],
			[
				"verti",
				"vertexIndiciesForFacesNew ([])"
			],
			[
				"edge",
				"edgeIndicesShared ([])"
			],
			[
				"numberofed",
				"numberOfEdgesOriginal (num)"
			],
			[
				"numberofver",
				"numberOfVerticesOriginal (num)"
			],
			[
				"vetre",
				"vertexOriginal (?)"
			],
			[
				"facePo",
				"facePoints ([])"
			],
			[
				"edgeP",
				"edgePoints ([])"
			],
			[
				"aver",
				"averageofEdgeMidpointsAdjacent (obj)"
			],
			[
				"averageofed",
				"averageofEdgeMidpointsAdjacent (obj)"
			],
			[
				"numberof",
				"numberOfEdgesAdjacent (?)"
			],
			[
				"edgeD",
				"edgeMidPoint (?)"
			],
			[
				"edgeInde",
				"edgeIndex (?)"
			],
			[
				"number",
				"numberOfVerticesOriginal (num)"
			],
			[
				"numb",
				"numberofVerticiesInFace (?)"
			],
			[
				"n",
				"numberofVerticiesInFace (?)"
			],
			[
				"vertexint",
				"vertexIndexNext (?)"
			],
			[
				"po",
				"positions (?)"
			],
			[
				"divi",
				"divideScalar"
			],
			[
				"over",
				"overwriteWith (fn/1)"
			],
			[
				"sqrt",
				"sqrt (fn/0)"
			],
			[
				"fun",
				"function"
			],
			[
				"e",
				"elements"
			],
			[
				"cre",
				"create"
			],
			[
				"c",
				"create (fn/1)"
			],
			[
				"getc",
				"getContext (fn/1)"
			],
			[
				"make",
				"makeOrtho (fn/6)"
			],
			[
				"f",
				"for	for (…) {…} (Improved Native For-Loop)"
			],
			[
				"ma",
				"makeFacePoint"
			],
			[
				"attach",
				"gl.attachShader(${0:WebGLProgram_program}, WebGLShader_shader)	GLCompletion"
			],
			[
				"powe",
				"powerupChance"
			],
			[
				"tickco",
				"tickCountFire"
			],
			[
				"collisio",
				"collisionHelper"
			],
			[
				"colliso",
				"collisionHelper"
			],
			[
				"sprt",
				"spriteSheetData"
			],
			[
				"spriteShe",
				"spriteSheetData"
			],
			[
				"power",
				"powerup"
			],
			[
				"generate",
				"generatePowerup"
			],
			[
				"arra",
				"arrayA"
			],
			[
				"prev",
				"prev_seq"
			],
			[
				"cus",
				"cursorPos"
			],
			[
				"new_",
				"new_command"
			],
			[
				"subl",
				"sublime_plugin"
			],
			[
				"line",
				"line_conts"
			]
		]
	},
	"buffers":
	[
		{
			"file": "scripts/mesh/vector.js",
			"settings":
			{
				"buffer_size": 2908,
				"line_ending": "Windows"
			}
		},
		{
			"file": "scripts/mesh/vertex.js",
			"settings":
			{
				"buffer_size": 1340,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "        //Doo Sabin subdivision method\n        doosabinSubdivide: function() {\n            // Useful vars for iterating\n            var numFaces = this.faces.length;\n            var numEdges = this.edges.length;\n            var numVertices = this.vertices.length;\n\n            // Face points\n            var facePoints = [];\n            for (var f = 0; f < numFaces; f++) {\n                facePoints.push(this.faces[f].getCenter(this));\n            }\n            this.facePoints = facePoints\n            // For edges \n            // Add edge popint\n            // Average of faces and neighbouring points\n            // Same as catmull\n            var edgePoints = [];\n            for  (var e = 0; e < numEdges; e++) {\n                edgePoints.push(this.edges[e].midpoint(this));\n            }\n\n            var vertexIndicesForFaces = [];\n            var newVertices = [];\n\n            var sumOfVertexPositions = new Vector();\n            var averageOfVertexPositions = new Vector();\n            averageOfVertexPositions.clear();\n\n            // For every face\n            var vertIndex = 0\n           // console.log(numFaces);\n            for (var f = 0; f < 1; f++) {\n                var face = this.faces[f];\n                var numEdges = face.edgeIndices.length\n\n                // Store the position of the face vertices in newVertices\n                var vertexIndicesForFace = []\n                // For every edge of the face\n\n                console.log(face.getCenter(this));\n\n                for (var e = 0; e < numEdges; e++) {\n                    // Get edge indexes\n                    var ei = face.edgeIndices[e]\n                    var edge = this.edges[ei];\n                    var vi = edge.vertexIndices[1];\n                    var vec = new Vector()\n                    vec.overwriteWith(this.vertices[vi].vec);\n                   // console.log(vec)\n\n                    // Get two edge indexes\n                    var ei1 = face.edgeIndices[e];\n                    var temp = e+1;\n                    if (temp >= numEdges) { \n                        temp = 0 \n                    }\n                    var ei2 = face.edgeIndices[temp];\n\n                    // Get two edges\n                    var e1 = this.edges[ei1];\n                    var e2 = this.edges[ei2];\n\n                    // Get two midpoints\n                    var e1Mid = e1.midpoint(this);\n                    var e2Mid = e2.midpoint(this);\n\n                    // get facepoint (0,0,1)????\n                    var facepoint = face.getCenter(this);\n\n                    // Get vertex of edge one\n                    var vi = e1.vertexIndices[1];\n                    var vec = this.vertices[vi].vec;\n\n                    // Get first vertex of edge 2\n                    var e2vi = e2.vertexIndices[0];\n                    var vec2 = this.vertices[e2vi].vec;\n                  //  console.log(\"----------------------\");\n                  //  console.log(vec);\n                   // console.log(vec2);\n                    console.log(facepoint);\n                    // if they arent equal (index is wrong on edge1) \n                    if (!vec.isEqualTo(vec2)) {\n                        vec.overwriteWith(vec2);\n                    }\n\n                    // Add\n                    var sum = new Vector();\n                    sum.clear();\n\n                    // edge vertexes both\n                    var vi0 = e1.vertexIndices[0];\n                    var vi1 = e1.vertexIndices[1];\n                    var v1 = this.vertices[vi0].vec;\n                    var v2 = this.vertices[vi1].vec;\n\n                    \n\n                \n                   // console.log(e1Mid);\n                  //  console.log(e2Mid);\n                  //  console.log(vec);\n\n\n                    sum.add(e1Mid).add(e2Mid).add(facepoint).add(vec);\n                    sum.divideScalar(4);\n\n                  //  console.log(sum);\n                  //  console.log(\"-------------------------\");\n                }\n\n\n                for (var e = 0; e < numEdges; e++) {\n\n                    // Get the two edges needed\n                    var edgeOneIndex = face.edgeIndices[e];\n\n                    var edgeTwoIndex = face.edgeIndices[(e+1)%numEdges];\n\n                    // Get the actual edges\n                    var edgeOne = this.edges[edgeOneIndex];\n                    var edgeTwo = this.edges[edgeTwoIndex];\n                    // get edge vertex indices\n                    var edgeOneVec = edgePoints[edgeOneIndex];\n                    var edgeTwoVec = edgePoints[edgeTwoIndex];\n\n                    // Get the facepoint vector\n                    var facePoint = facePoints[f];\n\n                    // Get first vertex of e1 \n                    var vertexIndex = edgeOne.vertexIndices[1];\n                    \n                    // Get the vertex\n                    var vertex = this.vertices[vertexIndex];\n\n\n                    // Now there is enough information to generate a new vector\n                   \n                    sumOfVertexPositions.clear();\n                    averageOfVertexPositions.clear();\n                    // Get the position of the new point\n                    sumOfVertexPositions.add(edgeOneVec)\n                                        .add(edgeTwoVec)\n                                        .add(facePoint)\n                                        .add(vertex.vec)//.divideScalar(4);\n                    averageOfVertexPositions.overwriteWith\n                        (\n                         sumOfVertexPositions\n                        ).divideScalar(4);\n\n                    face.getCenter(this)\n                    // console.log(sumOfVertexPositions);\n                    // console.log(averageOfVertexPositions);\n                    // console.log(edgeOneVec)\n                    // console.log(edgeTwoVec)\n                    // console.log(facePoint)\n                    // console.log(vertex.vec);\n                    // console.log(\"---------\")\n\n\n                    // Add this as a vertex to the vertex array\n                    newVertices.push(new Vertex(averageOfVertexPositions.clone()));\n\n                    // Clear the vector\n                    averageOfVertexPositions.clear()\n                    sumOfVertexPositions.clear();\n\n                    // Add the vertex index for this face\n                    vertexIndicesForFace.push(vertIndex);\n\n                    // Add the index to the edge\n                    edgeOne.vertexIndicesForFace.push(vertIndex);\n\n                    // Add the index to the vertex\n                    vertex.vertexIndicesForFace.push(vertIndex);\n\n                    // Increment the index\n                    vertIndex++;\n\n                }\n                //console.log(vertIndex)\n                // Now every point of the face has been created\n                // Add the face indexes to the main array\n                vertexIndicesForFaces.push(vertexIndicesForFace);\n\n            }\n\n            // Now generate the face for every edge\n            // Which should have 4 points\n            for (var e = 0; e < this.edges.length; e++) {\n                var edge = this.edges[e];\n               // vertexIndicesForFaces.push(edge.vertexIndicesForFace);\n            }\n\n            // Now generate the face for every vertex\n            for (var v = 0; v < this.vertices.length; v++) {\n                var vertex = this.vertices[v];\n              //  vertexIndicesForFaces.push(vertex.vertexIndicesForFace);\n            }\n\n            var returnValue = Models.face(); \n            (\n                \"DooSabin\",\n                newVertices,\n                vertexIndicesForFaces\n            );\n\n            return 1;\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n            //console.log(vertex.oldEdgeIndexes.length);  \n            // if (\n            //     vertex.oldEdgeIndexes[0] == vertex.oldEdgeIndexes[6] ||\n            //     vertex.oldEdgeIndexes[0] == vertex.oldEdgeIndexes[7] ||\n            //     vertex.oldEdgeIndexes[1] == vertex.oldEdgeIndexes[6] ||\n            //     vertex.oldEdgeIndexes[1] == vertex.oldEdgeIndexes[7] \n            //     ) \n            // {\n            //   // everything is good\n            //   vertexIndicesForFaces.push(vertex.vertexIndicesForFace);\n\n            // } else {\n            //   if (v == 10 ) {\n            //     console.log(v, \"  \", vertex.oldEdgeIndexes);\n            //     // problem\n            //     var c = vertex.vertexIndicesForFace[2];\n            //     var d = vertex.vertexIndicesForFace[3];\n            //     vertex.vertexIndicesForFace[2] = d;\n            //     vertex.vertexIndicesForFace[3] = c;\n\n            //     vertexIndicesForFaces.push(vertex.vertexIndicesForFace);\n            //   }\n            // }\n\n\n\n\n\n          // If 4 sided \n          if (vertex.vertexIndicesForFace.length == 4) {\n            // If egdes 4 or 5 are equal to 0 or 1\n            if (\n                vertex.oldEdgeIndexes[0] == vertex.oldEdgeIndexes[4] ||\n                vertex.oldEdgeIndexes[0] == vertex.oldEdgeIndexes[5] ||\n                vertex.oldEdgeIndexes[1] == vertex.oldEdgeIndexes[4] ||\n                vertex.oldEdgeIndexes[1] == vertex.oldEdgeIndexes[5] \n              )\n            {\n\n\n              console.log(v, \"  \", vertex.oldEdgeIndexes);\n              // var c = vertex.vertexIndicesForFace[2];\n              // var d = vertex.vertexIndicesForFace[3];\n              // vertex.vertexIndicesForFace[2] = d;\n              // vertex.vertexIndicesForFace[3] = c;\n              vertexIndicesForFaces.push(vertex.vertexIndicesForFace);\n            }  \n\n\n\n\n              // Rearrange some stuff\n              var edges =  vertex.oldEdgeIndexes;\n\n              var newEdges = [\n              [edges[2],edges[3], vertex.vertexIndicesForFace[1]], // 0\n              [edges[4],edges[5], vertex.vertexIndicesForFace[2]], // 1\n              [edges[6],edges[7], vertex.vertexIndicesForFace[3]]  // 2\n              ];\n\n              // Rearrange\n              var finalEdges = [\n              [edges[0],edges[1], vertex.vertexIndicesForFace[0]]\n              ];\n\n              console.log(\"starting do while\");\n              console.log(newEdges);\n              console.log(finalEdges);\n              // do {\n              //   for (var i = 0; i < newEdges.length; i++) {\n              //     console.log(newEdges.length);\n              //     if (newEdges.length == 1) {\n              //       finalEdges.push(newEdges[0]);\n              //       newEdges.splice(0, 1);\n              //     }\n              //     if (newEdges[i][0] == finalEdges.last()[1]) {\n              //       // Add and break\n              //       finalEdges.push(newEdges[i]);\n              //       newEdges.splice(i,1);\n              //       console.log(\"is true\");\n              //     } \n              //   }\n\n              // }\n              // while(finalEdges.length < 4 );\n\n              // console.log(\"ending do while\");\n\n              // vertexIndicesForFaces.push([\n              //   finalEdges[0][2],\n              //   finalEdges[1][2],\n              //   finalEdges[2][2],\n              //   finalEdges[3][2],\n              // ]);\n\n\n\n\n\n      // for every face\n      // for (var fi = 0; fi < this.faces.length; fi++) {\n      //   var face = this.faces[fi];\n      //   // for every edge of every face\n      //   //console.log(face.edgeIndices.length);\n      //   for (var ei = 0; ei < face.edgeIndices.length; ei++) {\n      //     // Get the edge\n      //     var edge = this.edges[face.edgeIndices[ei]];\n      //     // Check if edge has this face index\n      //   // console.log(edge.faceIndices.length);\n\n\n      //    for (var f = 0; f < edge.faceIndices.length; f++) {\n      //     if (edge.faceIndices.length != 2) {\n      //      // console.log(\"this edge is wrong\");\n      //       console.log(\"face: \", fi, \"edge: \", face.edgeIndices[ei],\n      //         \"edges face indexes: \", edge.faceIndices);\n      //     }\n      //    }\n\n          // if (edge.faceIndices.indexOf(fi) == -1) {\n          //   // Does not exist\n          //   console.log(\"doesnt exist\");\n          // }\n        }\n      }\n\n      // face 3\n      // var face = this.faces[3];\n      // console.log(face.edgeIndices.length);\n      // // 4 edges in this face, edge should have 2 faces\n\n      // for (var ei = 0; ei < face.edgeIndices.length; ei++) {\n      //   var edgeIndex = face.edgeIndices[ei];\n      //   var edge = this.edges[edgeIndex];\n      //   //console.log(edge.faceIndices.length);s\n      //   console.log(edgeIndex);\n      //   console.log(edge.faceIndices);\n      // }\n\n\n\n      // for (var fi = 0; fi < this.faces.length; fi++) {\n      //   var face = this.faces[fi];\n\n      //   for (var ei = 0; ei < face.edgeIndices.length; ei++) {\n      //     var edgeIndex = face.edgeIndices[ei];\n\n      //     if (edgeIndex == 429) {\n      //       console.log(\"Face of edge 429: \", fi);\n      //     }\n      //   }\n      // }",
			"settings":
			{
				"buffer_size": 12906,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "- ~~Cleanup catmullSubdivide() in mesh.js~~\n- ~~Move all mesh files into single folder~~\n- ~~Fix support for 3 sided faces in element array generation~~\n\n- Add support for .obj imports\n- Add dynamic camera positioning\n  - Scan obj files for largest xyz vals?\n- ~~Fullscreen canvas~~\n- Fix rotation\n\n- ~~Implement dat.gui~~\n- ~~Add more models~~\n- ~~Sudvidided square~~\n- ~~suzanna monkey~~\n\n- ~~Add DooSabin subdivision~~\n- Add Loop subdivision\n- Fix model edge problem\n- Stats.js\n",
			"file": "TODO.md",
			"file_size": 460,
			"file_write_time": 130784502367389960,
			"settings":
			{
				"buffer_size": 481,
				"line_ending": "Windows"
			}
		},
		{
			"file": "index.html",
			"settings":
			{
				"buffer_size": 1896,
				"line_ending": "Unix"
			}
		},
		{
			"file": "scripts/mesh/edge.js",
			"settings":
			{
				"buffer_size": 3369,
				"line_ending": "Windows"
			}
		},
		{
			"file": "scripts/mesh/face.js",
			"settings":
			{
				"buffer_size": 2413,
				"line_ending": "Windows"
			}
		},
		{
			"file": "scripts/extensions.js",
			"settings":
			{
				"buffer_size": 1153,
				"line_ending": "Windows"
			}
		},
		{
			"file": "scripts/mesh/mesh.js",
			"settings":
			{
				"buffer_size": 22003,
				"line_ending": "Windows"
			}
		},
		{
			"file": "scripts/app.js",
			"settings":
			{
				"buffer_size": 14204,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Program Files (x86)/vim/_vimrc",
			"settings":
			{
				"buffer_size": 5369,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 375.0,
		"last_filter": "inst",
		"selected_items":
		[
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Enable Package"
			],
			[
				"java",
				"Set Syntax: JavaScript"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Preferences: Browse Packages"
			],
			[
				"pretty",
				"Pretty JSON: Format (Pretty Print) JSON"
			],
			[
				"jso",
				"Set Syntax: JSON"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"remove pa",
				"Package Control: Remove Package"
			],
			[
				"preferen",
				"Preferences: Settings - User"
			],
			[
				"prefern",
				"Preferences: Alignment Key Bindings – User"
			],
			[
				"preferned",
				"Preferences: Javatar Settings – Default"
			],
			[
				"prefer",
				"Preferences: Settings - Default"
			],
			[
				"prefere",
				"Preferences: Settings - User"
			]
		],
		"width": 514.0
	},
	"console":
	{
		"height": 279.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"import urllib.request,os,sys; exec(\"if sys.version_info < (3,) or os.name != 'nt': raise OSError('This code is for Windows ST3 only!')\"); pr='Preferences.sublime-settings'; ip='ignored_packages'; n='Package Control'; s=sublime.load_settings(pr); ig=s.get(ip); ig.append(n); s.set(ip,ig); sublime.save_settings('Preferences.sublime-settings'); pf=n+'.sublime-package'; urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler())); by=urllib.request.urlopen('https://packagecontrol.io/'+pf.replace(' ','%20')).read(); open(os.path.join(sublime.installed_packages_path(),pf),'wb').write(by); ig.remove(n); s.set(ip,ig); sublime.save_settings(pr); print('Package Control: 3.0.0 upgrade successful!')",
			"sublime.log_commands(True)",
			"sublime.log_input(True)",
			";",
			"sublime.log_commands(True)",
			"view.run_command('example')",
			";",
			"view.run_command('example')",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/Shazib/Desktop/SubdivisionJS",
		"/C/Users/Shazib/Desktop/SubdivisionJS/scripts",
		"/C/Users/Shazib/Desktop/SubdivisionJS/scripts/mesh"
	],
	"file_history":
	[
		"/C/Users/Shazib/_viminfo",
		"/C/Program Files (x86)/vim/_vimrc",
		"/C/Users/Shazib/.atom/packages/atom-ternjs/node_modules/tern-lint/demos/codemirror/mode/velocity/velocity.js",
		"/C/Users/Shazib/Desktop/SubdivisionJS/scripts/vector.js",
		"/C/Users/Shazib/Desktop/untitled.obj",
		"/C/Users/Shazib/Desktop/temp.csv",
		"/C/Users/Shazib/Desktop/SubdivisionJS/scripts/models.js",
		"/C/Users/Shazib/Desktop/random.csv",
		"/C/Users/Shazib/Desktop/random.cvs",
		"/C/Users/Shazib/Desktop/SubdivisionJS/scripts/mesh/mesh.js",
		"/C/Users/Shazib/Desktop/SubdivisionJS/scripts/libs/dat.gui.js",
		"/C/Users/Shazib/AppData/Roaming/Sublime Text 3/Packages/User/Choose Browser.sublime-build",
		"/C/Users/Shazib/Desktop/SubdivisionJS/scripts/glhelper.js",
		"/C/Users/Shazib/Desktop/matlab.txt",
		"/C/Users/Shazib/AppData/Roaming/Sublime Text 3/Packages/tern_for_sublime/package.json",
		"/C/Users/Shazib/Desktop/SubdivisionJS/.tern-project",
		"/C/Users/Shazib/Desktop/SubdivisionJS/index.html",
		"/C/Users/Shazib/Desktop/SubdivisionJS/scripts/extensions.js",
		"/C/Users/Shazib/Desktop/SubdivisionJS/scripts/mesh.js",
		"/C/Users/Shazib/Desktop/Thesis - 2D - Copy - Copy (3)/sylvester.src.js",
		"/C/Users/Shazib/Desktop/sylvester.js",
		"/C/Users/Shazib/Desktop/SubdivisionJS/sylvester.js",
		"/C/Users/Shazib/Desktop/SubdivisionJS/subdivisionjs.sublime-workspace",
		"/C/Users/Shazib/Desktop/ThesisCube/glUtils.js",
		"/C/Users/Shazib/AppData/Local/Temp/Rar$DIa0.512/sylvester.js",
		"/C/Users/Shazib/Desktop/ThesisCube/temp.js",
		"/C/Users/Shazib/Desktop/jabtunes.com-1433449516435.log",
		"/D/Downloads/Person.of.Interest.S04E20.1080p.HDTV.X264-DIMENSION/person.of.interest.420.1080-dimension.nfo",
		"/C/Users/Shazib/Desktop/Thesis - 2D - Copy/glUtils.js",
		"/C/Users/Shazib/AppData/Local/Temp/Rar$DIa0.953/edge.cpp",
		"/C/Users/Shazib/AppData/Local/Temp/Rar$DIa0.650/face.cpp",
		"/C/Users/Shazib/Desktop/random.cpp",
		"/C/Users/Shazib/Desktop/Thesis - 2D - Copy/.tern-project",
		"/C/Users/Shazib/AppData/Roaming/Sublime Text 3/Packages/tern_for_sublime/node_modules/tern/defs/webgl.json",
		"/C/Users/Shazib/AppData/Roaming/Sublime Text 3/Packages/tern_for_sublime/node_modules/tern/defs/browser.json",
		"/C/Users/Shazib/Desktop/webgl.def.ts",
		"/C/Users/Shazib/AppData/Roaming/Sublime Text 3/Packages/tern_for_sublime/node_modules/tern/lib/def.js",
		"/C/Users/Shazib/AppData/Roaming/Sublime Text 3/Packages/tern_for_sublime/node_modules/tern/bin/from_ts",
		"/C/Users/Shazib/Desktop/Thesis - 2D - Copy/index.html",
		"/C/Users/Shazib/Desktop/Thesis - 2D - Copy/model.js",
		"/C/Users/Shazib/Desktop/Thesis - 2D - Copy/sylvester.src.js",
		"/C/Users/Shazib/AppData/Local/Temp/Rar$DIa0.965/sylvester.src.js",
		"/C/Users/Shazib/Desktop/Thesis - 2D - Copy/sylvester.js",
		"/C/Users/Shazib/Desktop/temp.js",
		"/C/Users/Shazib/AppData/Local/Temp/Rar$DIa0.690/sylvester.js",
		"/C/Users/Shazib/AppData/Local/Temp/Rar$DIa0.077/sylvester.js",
		"/C/Users/Shazib/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/Shazib/Desktop/Thesis - 2D - Copy/script.js",
		"/C/Users/Shazib/Desktop/Thesis - 2D - Copy/main.js",
		"/C/Users/Shazib/Desktop/Thesis - 2D/scripts/helper/model.js",
		"/C/Users/Shazib/Desktop/Thesis - 2D/scripts/helper/glUtils.js",
		"/C/Users/Shazib/Desktop/Thesis - 2D/scripts/main.js",
		"/C/Users/Shazib/Desktop/Thesis - 2D/index.html",
		"/C/Users/Shazib/Desktop/Thesis - 2D/require.js",
		"/C/Users/Shazib/Desktop/Thesis - 2D/model.js",
		"/C/Users/Shazib/Desktop/Thesis - 2D/script.js",
		"/C/Users/Shazib/Desktop/Thesis - 2D/thesis.sublime-project",
		"/C/Users/Shazib/Desktop/Thesis - 2D/.tern-port",
		"/C/Users/Shazib/Desktop/Thesis - 2D/glUtils.js",
		"/C/Users/Shazib/Desktop/Thesis - 2D/sylvester.js",
		"/C/Users/Shazib/Desktop/Thesis - 2D/thesis.sublime-workspace",
		"/C/Users/Shazib/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/D/Downloads/Orphan.Black.S03E05.720p.HDTV.x264-KILLERS/orphan.black.s03e05.720p.hdtv.x264-killers.nfo",
		"/C/Users/Shazib/AppData/Local/Temp/Rar$DIa0.669/private.h",
		"/C/Users/Shazib/AppData/Local/Temp/Rar$DIa0.937/face.cpp",
		"/C/Users/Shazib/AppData/Local/Temp/Rar$DIa0.735/shell.cpp",
		"/C/Users/Shazib/AppData/Local/Temp/Rar$DIa0.154/brep.h",
		"/C/Users/Shazib/AppData/Local/Temp/Rar$DIa0.116/vertex.cpp",
		"/C/Users/Shazib/AppData/Local/Temp/Rar$DIa0.358/private.h",
		"/C/Users/Shazib/AppData/Local/Temp/Rar$DIa0.730/edge.cpp",
		"/C/Users/Shazib/AppData/Local/Temp/Rar$DIa0.216/contour.cpp",
		"/C/Users/Shazib/AppData/Local/Temp/Rar$DIa0.824/brep.h",
		"/C/Users/Shazib/Desktop/Thesis/glUtils.js",
		"/C/Users/Shazib/Desktop/Thesis/model.js",
		"/C/Users/Shazib/Desktop/Thesis/script.js",
		"/C/Users/Shazib/Desktop/Thesis/sylvester.js",
		"/C/Users/Shazib/Dropbox/MSc/@thesis/Loop/print.cpp",
		"/C/Users/Shazib/Dropbox/MSc/@thesis/Loop/object.cpp",
		"/C/Users/Shazib/Dropbox/MSc/@thesis/Loop/loop.h",
		"/C/Users/Shazib/Dropbox/MSc/@thesis/Loop/loop.cpp",
		"/C/Users/Shazib/Dropbox/MSc/@thesis/Loop/data/cylinder.obj",
		"/C/Users/Shazib/Dropbox/MSc/@thesis/Loop/alphas.nb",
		"/C/Users/Shazib/AppData/Local/Temp/Rar$DIa0.053/asuds2.off",
		"/C/Users/Shazib/Desktop/test.tex",
		"/C/Users/Shazib/Desktop/MSC MISC/ConsoleApplication1/ConsoleApplication1/main.cpp",
		"/C/Users/Shazib/Desktop/Kernel6/readme.txt",
		"/C/Users/Shazib/Desktop/Kernel4/readme.txt",
		"/C/Users/Shazib/AppData/Local/Temp/Rar$DIa0.320/README_AJBREC_v1.21d.txt",
		"/C/Users/Shazib/Desktop/Kernel5/template.cu",
		"/C/Users/Shazib/Desktop/Kernel4/template.cu",
		"/C/Users/Shazib/Desktop/Kernel3/template.cu",
		"/C/Users/Shazib/Desktop/Kernel2/template.cu",
		"/C/Users/Shazib/Desktop/Kernel1/template.cu",
		"/C/Users/Shazib/Desktop/Kernel6/template.cu",
		"/C/Users/Shazib/Desktop/Kernel5/template_cpu.cpp",
		"/C/Users/Shazib/Desktop/Kernel4/jacobi.dat",
		"/C/Users/Shazib/Dropbox/MSc/High Performance Computing/Assignment/HPCSerial/HPCSerial/Serial.c",
		"/C/Users/Shazib/AppData/Local/Temp/Rar$DIa0.174/kernel.cu",
		"/C/Users/Shazib/Downloads/01-hello_world(2).cu",
		"/C/Users/Shazib/Downloads/02-matrix_add.cu",
		"/C/Users/Shazib/Downloads/03-shared_memory.cu",
		"/C/Users/Shazib/Downloads/02-coalescing (1).cu",
		"/C/Users/Shazib/AppData/Local/Temp/Rar$DRa0.843/solution/main.cu",
		"/C/Users/Shazib/AppData/Local/Temp/Rar$DRa0.705/solution/definitions.cuh",
		"/C/Users/Shazib/Desktop/Kernel3/jacobi.dat",
		"/C/Users/Shazib/Desktop/Kernel2 - Copy/jacobi.dat",
		"/C/Users/Shazib/Desktop/Kernel2/jacobi.dat",
		"/C/Users/Shazib/Desktop/Kernel1/template/jacobi.dat",
		"/C/Users/Shazib/Desktop/Kernel1/template/template.cu",
		"/C/Program Files/NVIDIA Corporation/CUDA Samples/1_Utilities/deviceQueryDrv/readme.txt",
		"/C/Program Files/NVIDIA Corporation/CUDA Samples/1_Utilities/deviceQuery/readme.txt",
		"/C/Users/Shazib/Desktop/template/jacobi.dat",
		"/C/Program Files/NVIDIA Corporation/Installer2/CUDASamples_7.0.{5AAD6771-FCE5-4ACB-B53F-E38BA41E5104}/0_Simple/matrixMulDrv/matrixMul_kernel.cu",
		"/C/Users/Shazib/AppData/Local/Temp/Rar$DIa0.927/readme.txt",
		"/C/Users/Shazib/AppData/Local/Temp/Rar$DRa0.399/solution/kernel.cu",
		"/C/Users/Shazib/Desktop/ts.lua",
		"/D/Projects/GroupMe Bot/tv_command/tv_command.h",
		"/D/Projects/GroupMe Bot/tv_command/tv_command.cpp",
		"/C/Users/Shazib/Dropbox/MSc/Cloud Computing/Lecture Notes/cranfield-cloud-latest.txt",
		"/C/Users/Shazib/Desktop/id_rsa.pub",
		"/D/My Pictures/Random/Stuff/2013/JamesDopplegangerTroll2013.txt",
		"/C/Users/Shazib/AppData/Local/Temp/Rar$DIa0.767/answer.c",
		"/C/Users/Shazib/AppData/Local/Temp/Rar$DRa0.633/README",
		"/C/Users/Shazib/AppData/Local/Temp/Rar$DIa0.850/02-coalescing.cu",
		"/C/Users/Shazib/Desktop/config.json",
		"/C/Users/Shazib/Downloads/02-coalescing.cu",
		"/C/Users/Shazib/Desktop/nostalgia.lua",
		"/C/Users/Shazib/Desktop/ts.lua.old"
	],
	"find":
	{
		"height": 36.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"47",
			"requestAnimationFrame",
			"    ",
			"\\t",
			"averageofv",
			"console.lo",
			".faceindic",
			"console",
			"console.",
			"objects",
			"frag",
			"0",
			"vertexpo",
			"averte",
			"cons",
			"dup",
			"x:",
			"x ",
			":x",
			"Matrix.I",
			"console.lo",
			"console.log",
			"this",
			"console.log",
			"x",
			"cube",
			"            \n",
			"console.l",
			"cons",
			"conseol.log",
			" d:",
			" c:",
			" b:",
			" z:",
			" y:",
			" z:",
			" y:",
			" d:",
			" c:",
			" b:",
			" z:",
			" y:",
			" c:",
			" z:",
			" y:",
			"color",
			"verticesnew",
			"manyfrompos",
			"edgepoints",
			"matrix",
			"auto_complete",
			"selector",
			"mallo",
			"dgrid",
			"include",
			"remainingaliens = ",
			"remainingaliens = -1",
			"powerupactive = false",
			"tickcountmov",
			"print",
			"firerate",
			"firing = false",
			"endwave",
			"firing = true",
			"firing = false",
			"powerup.type",
			"collisionh",
			"\"alienmi",
			"=",
			"anchorx",
			"missiles[i].ach",
			"moveboss",
			"firerate",
			"powerups",
			"0.53139",
			"offse",
			"max",
			"MAX",
			"status",
			"UP ",
			"save",
			"tryparse",
			"getarray",
			"getmatrix",
			"W",
			"moving ",
			"remainingaliens",
			"print",
			"dd",
			"cin",
			" cout",
			" endl",
			"endl",
			"cout",
			"self",
			"bold",
			"font",
			"ctrl+alt+left",
			"ctrl+alt+",
			"ctrl+t",
			"ctrl+shift+left",
			"ctrl+left",
			"ctrl+alt",
			"enter",
			"self.view",
			"edit",
			"bob",
			"icon",
			"ruler",
			"true"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"  ",
			"model",
			"",
			"std::cin",
			"std::cout",
			" std::endl",
			"std::endl",
			"std::cout",
			"view",
			""
		],
		"reverse": false,
		"show_context": false,
		"use_buffer2": false,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 10,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "scripts/mesh/vector.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2908,
						"regions":
						{
						},
						"selection":
						[
							[
								1831,
								1831
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1224.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "scripts/mesh/vertex.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1340,
						"regions":
						{
						},
						"selection":
						[
							[
								840,
								840
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12906,
						"regions":
						{
						},
						"selection":
						[
							[
								12118,
								12118
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3630.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "TODO.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 481,
						"regions":
						{
						},
						"selection":
						[
							[
								469,
								469
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1896,
						"regions":
						{
						},
						"selection":
						[
							[
								1106,
								1106
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "scripts/mesh/edge.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3369,
						"regions":
						{
						},
						"selection":
						[
							[
								1954,
								1954
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 995.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "scripts/mesh/face.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2413,
						"regions":
						{
						},
						"selection":
						[
							[
								671,
								671
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "scripts/extensions.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1153,
						"regions":
						{
						},
						"selection":
						[
							[
								919,
								919
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "scripts/mesh/mesh.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22003,
						"regions":
						{
						},
						"selection":
						[
							[
								2706,
								2706
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"word_wrap": false
						},
						"translation.x": 0.0,
						"translation.y": 748.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "scripts/app.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14204,
						"regions":
						{
						},
						"selection":
						[
							[
								13263,
								13263
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5921.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/C/Program Files (x86)/vim/_vimrc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5369,
						"regions":
						{
						},
						"selection":
						[
							[
								439,
								439
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 35.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 340.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.tern_arghint":
	{
		"height": 102.0
	},
	"pinned_build_system": "",
	"project": "subdivisionjs.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"sylvester.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 191.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
